{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateContractAddressFromHash = exports.calculateTransactionHash = exports.calculateDeployAccountTransactionHash = exports.calculateDeclareTransactionHash = exports.calculateDeployTransactionHash = exports.calculateTransactionHashCommon = exports.computeHashOnElements = exports.pedersen = exports.getSelector = exports.getSelectorFromName = exports.starknetKeccak = exports.keccakBn = exports.feeTransactionVersion = exports.transactionVersion = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar utils_1 = require(\"ethereum-cryptography/utils\");\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar ellipticCurve_1 = require(\"./ellipticCurve\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.transactionVersion = 1;\nexports.feeTransactionVersion = (0, number_1.toBN)(2).pow((0, number_1.toBN)(128)).add((0, number_1.toBN)(exports.transactionVersion));\nfunction keccakBn(value) {\n  var hexWithoutPrefix = (0, encode_1.removeHexPrefix)((0, number_1.toHex)((0, number_1.toBN)(value)));\n  var evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : \"0\".concat(hexWithoutPrefix);\n  return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, utils_1.hexToBytes)(evenHex))));\n}\nexports.keccakBn = keccakBn;\nfunction keccakHex(value) {\n  return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, encode_1.utf8ToArray)(value))));\n}\n/**\n * Function to get the starknet keccak hash from a string\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param value - string you want to get the starknetKeccak hash from\n * @returns starknet keccak hash as BigNumber\n */\nfunction starknetKeccak(value) {\n  return (0, number_1.toBN)(keccakHex(value)).and(constants_1.MASK_250);\n}\nexports.starknetKeccak = starknetKeccak;\n/**\n * Function to get the hex selector from a given function name\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName - selectors abi function name\n * @returns hex selector of given abi function name\n */\nfunction getSelectorFromName(funcName) {\n  // sometimes BigInteger pads the hex string with zeros, which is not allowed in the starknet api\n  return (0, number_1.toHex)(starknetKeccak(funcName));\n}\nexports.getSelectorFromName = getSelectorFromName;\n/**\n * Function to get hex selector from function name, decimal string or hex string\n * @param value hex string | decimal string | string\n * @returns Hex selector\n */\nfunction getSelector(value) {\n  if ((0, number_1.isHex)(value)) {\n    return value;\n  }\n  if ((0, number_1.isStringWholeNumber)(value)) {\n    return (0, number_1.toHexString)(value);\n  }\n  return getSelectorFromName(value);\n}\nexports.getSelector = getSelector;\nvar constantPoints = constants_1.CONSTANT_POINTS.map(function (coords) {\n  return ellipticCurve_1.ec.curve.point(coords[0], coords[1]);\n});\nfunction pedersen(input) {\n  var point = constantPoints[0];\n  for (var i = 0; i < input.length; i += 1) {\n    var x = (0, number_1.toBN)(input[i]);\n    (0, minimalistic_assert_1.default)(x.gte(constants_1.ZERO) && x.lt((0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.FIELD_PRIME))), \"Invalid input: \".concat(input[i]));\n    if (!x.isZero()) {\n      for (var j = 0; j < 252; j += 1) {\n        var pt = constantPoints[2 + i * 252 + j];\n        (0, minimalistic_assert_1.default)(!point.getX().eq(pt.getX()));\n        if (x.and(constants_1.ONE).toNumber() !== 0) {\n          point = point.add(pt);\n        }\n        x = x.shrn(1);\n      }\n    }\n  }\n  return (0, encode_1.addHexPrefix)(point.getX().toString(16));\n}\nexports.pedersen = pedersen;\nfunction computeHashOnElements(data) {\n  return __spreadArray(__spreadArray([], __read(data), false), [data.length], false).reduce(function (x, y) {\n    return pedersen([x, y]);\n  }, 0).toString();\n}\nexports.computeHashOnElements = computeHashOnElements;\n// following implementation is based on this python implementation:\n// https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData) {\n  if (additionalData === void 0) {\n    additionalData = [];\n  }\n  var calldataHash = computeHashOnElements(calldata);\n  var dataToHash = __spreadArray([txHashPrefix, version, contractAddress, entryPointSelector, calldataHash, maxFee, chainId], __read(additionalData), false);\n  return computeHashOnElements(dataToHash);\n}\nexports.calculateTransactionHashCommon = calculateTransactionHashCommon;\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId) {\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY, version, contractAddress, getSelectorFromName('constructor'), constructorCalldata, constants_1.ZERO, chainId);\n}\nexports.calculateDeployTransactionHash = calculateDeployTransactionHash;\nfunction calculateDeclareTransactionHash(\n// contractClass: ContractClass, // Should be used once class hash is present in ContractClass\nclassHash, senderAddress, version, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DECLARE, version, senderAddress, 0, [classHash], maxFee, chainId, [nonce]);\n}\nexports.calculateDeclareTransactionHash = calculateDeclareTransactionHash;\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n  var calldata = __spreadArray([classHash, salt], __read(constructorCalldata), false);\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY_ACCOUNT, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nexports.calculateDeployAccountTransactionHash = calculateDeployAccountTransactionHash;\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.INVOKE, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nexports.calculateTransactionHash = calculateTransactionHash;\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  var constructorCalldataHash = computeHashOnElements(constructorCalldata);\n  var CONTRACT_ADDRESS_PREFIX = (0, number_1.toFelt)('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n  var dataToHash = [CONTRACT_ADDRESS_PREFIX, deployerAddress, salt, classHash, constructorCalldataHash];\n  return computeHashOnElements(dataToHash);\n}\nexports.calculateContractAddressFromHash = calculateContractAddressFromHash;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","__importDefault","mod","__esModule","Object","defineProperty","exports","calculateContractAddressFromHash","calculateTransactionHash","calculateDeployAccountTransactionHash","calculateDeclareTransactionHash","calculateDeployTransactionHash","calculateTransactionHashCommon","computeHashOnElements","pedersen","getSelector","getSelectorFromName","starknetKeccak","keccakBn","feeTransactionVersion","transactionVersion","keccak_1","require","utils_1","minimalistic_assert_1","constants_1","ellipticCurve_1","encode_1","number_1","toBN","pow","add","hexWithoutPrefix","removeHexPrefix","toHex","evenHex","addHexPrefix","buf2hex","keccak256","hexToBytes","keccakHex","utf8ToArray","and","MASK_250","funcName","isHex","isStringWholeNumber","toHexString","constantPoints","CONSTANT_POINTS","map","coords","ec","curve","point","input","x","default","gte","ZERO","lt","FIELD_PRIME","isZero","j","pt","getX","eq","ONE","toNumber","shrn","toString","data","reduce","y","txHashPrefix","version","contractAddress","entryPointSelector","calldata","maxFee","chainId","additionalData","calldataHash","dataToHash","constructorCalldata","TransactionHashPrefix","DEPLOY","classHash","senderAddress","nonce","DECLARE","salt","DEPLOY_ACCOUNT","INVOKE","deployerAddress","constructorCalldataHash","CONTRACT_ADDRESS_PREFIX","toFelt"],"sources":["C:/Users/admin/Documents/Blockchain test/CairoBootcamp/starknet_js_demo/node_modules/starknet/dist/utils/hash.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateContractAddressFromHash = exports.calculateTransactionHash = exports.calculateDeployAccountTransactionHash = exports.calculateDeclareTransactionHash = exports.calculateDeployTransactionHash = exports.calculateTransactionHashCommon = exports.computeHashOnElements = exports.pedersen = exports.getSelector = exports.getSelectorFromName = exports.starknetKeccak = exports.keccakBn = exports.feeTransactionVersion = exports.transactionVersion = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar utils_1 = require(\"ethereum-cryptography/utils\");\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar ellipticCurve_1 = require(\"./ellipticCurve\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.transactionVersion = 1;\nexports.feeTransactionVersion = (0, number_1.toBN)(2).pow((0, number_1.toBN)(128)).add((0, number_1.toBN)(exports.transactionVersion));\nfunction keccakBn(value) {\n    var hexWithoutPrefix = (0, encode_1.removeHexPrefix)((0, number_1.toHex)((0, number_1.toBN)(value)));\n    var evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : \"0\".concat(hexWithoutPrefix);\n    return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, utils_1.hexToBytes)(evenHex))));\n}\nexports.keccakBn = keccakBn;\nfunction keccakHex(value) {\n    return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, encode_1.utf8ToArray)(value))));\n}\n/**\n * Function to get the starknet keccak hash from a string\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param value - string you want to get the starknetKeccak hash from\n * @returns starknet keccak hash as BigNumber\n */\nfunction starknetKeccak(value) {\n    return (0, number_1.toBN)(keccakHex(value)).and(constants_1.MASK_250);\n}\nexports.starknetKeccak = starknetKeccak;\n/**\n * Function to get the hex selector from a given function name\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName - selectors abi function name\n * @returns hex selector of given abi function name\n */\nfunction getSelectorFromName(funcName) {\n    // sometimes BigInteger pads the hex string with zeros, which is not allowed in the starknet api\n    return (0, number_1.toHex)(starknetKeccak(funcName));\n}\nexports.getSelectorFromName = getSelectorFromName;\n/**\n * Function to get hex selector from function name, decimal string or hex string\n * @param value hex string | decimal string | string\n * @returns Hex selector\n */\nfunction getSelector(value) {\n    if ((0, number_1.isHex)(value)) {\n        return value;\n    }\n    if ((0, number_1.isStringWholeNumber)(value)) {\n        return (0, number_1.toHexString)(value);\n    }\n    return getSelectorFromName(value);\n}\nexports.getSelector = getSelector;\nvar constantPoints = constants_1.CONSTANT_POINTS.map(function (coords) {\n    return ellipticCurve_1.ec.curve.point(coords[0], coords[1]);\n});\nfunction pedersen(input) {\n    var point = constantPoints[0];\n    for (var i = 0; i < input.length; i += 1) {\n        var x = (0, number_1.toBN)(input[i]);\n        (0, minimalistic_assert_1.default)(x.gte(constants_1.ZERO) && x.lt((0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.FIELD_PRIME))), \"Invalid input: \".concat(input[i]));\n        if (!x.isZero()) {\n            for (var j = 0; j < 252; j += 1) {\n                var pt = constantPoints[2 + i * 252 + j];\n                (0, minimalistic_assert_1.default)(!point.getX().eq(pt.getX()));\n                if (x.and(constants_1.ONE).toNumber() !== 0) {\n                    point = point.add(pt);\n                }\n                x = x.shrn(1);\n            }\n        }\n    }\n    return (0, encode_1.addHexPrefix)(point.getX().toString(16));\n}\nexports.pedersen = pedersen;\nfunction computeHashOnElements(data) {\n    return __spreadArray(__spreadArray([], __read(data), false), [data.length], false).reduce(function (x, y) { return pedersen([x, y]); }, 0).toString();\n}\nexports.computeHashOnElements = computeHashOnElements;\n// following implementation is based on this python implementation:\n// https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData) {\n    if (additionalData === void 0) { additionalData = []; }\n    var calldataHash = computeHashOnElements(calldata);\n    var dataToHash = __spreadArray([\n        txHashPrefix,\n        version,\n        contractAddress,\n        entryPointSelector,\n        calldataHash,\n        maxFee,\n        chainId\n    ], __read(additionalData), false);\n    return computeHashOnElements(dataToHash);\n}\nexports.calculateTransactionHashCommon = calculateTransactionHashCommon;\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId) {\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY, version, contractAddress, getSelectorFromName('constructor'), constructorCalldata, constants_1.ZERO, chainId);\n}\nexports.calculateDeployTransactionHash = calculateDeployTransactionHash;\nfunction calculateDeclareTransactionHash(\n// contractClass: ContractClass, // Should be used once class hash is present in ContractClass\nclassHash, senderAddress, version, maxFee, chainId, nonce) {\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DECLARE, version, senderAddress, 0, [classHash], maxFee, chainId, [nonce]);\n}\nexports.calculateDeclareTransactionHash = calculateDeclareTransactionHash;\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n    var calldata = __spreadArray([classHash, salt], __read(constructorCalldata), false);\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY_ACCOUNT, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nexports.calculateDeployAccountTransactionHash = calculateDeployAccountTransactionHash;\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.INVOKE, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nexports.calculateTransactionHash = calculateTransactionHash;\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n    var constructorCalldataHash = computeHashOnElements(constructorCalldata);\n    var CONTRACT_ADDRESS_PREFIX = (0, number_1.toFelt)('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n    var dataToHash = [\n        CONTRACT_ADDRESS_PREFIX,\n        deployerAddress,\n        salt,\n        classHash,\n        constructorCalldataHash,\n    ];\n    return computeHashOnElements(dataToHash);\n}\nexports.calculateContractAddressFromHash = calculateContractAddressFromHash;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}