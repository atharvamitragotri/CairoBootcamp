{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verify = exports.sign = exports.getKeyPairFromPublicKey = exports.getStarkKey = exports.getKeyPair = exports.genKeyPair = exports.ec = void 0;\nvar elliptic_1 = require(\"elliptic\");\nvar hash_js_1 = __importDefault(require(\"hash.js\"));\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.ec = new elliptic_1.ec(new elliptic_1.curves.PresetCurve({\n  type: 'short',\n  prime: null,\n  p: constants_1.FIELD_PRIME,\n  a: '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001',\n  b: '06f21413 efbe40de 150e596d 72f7a8c5 609ad26c 15c915c1 f4cdfcb9 9cee9e89',\n  n: constants_1.EC_ORDER,\n  hash: hash_js_1.default.sha256,\n  gRed: false,\n  g: constants_1.CONSTANT_POINTS[1]\n}));\n/**\n * The function _truncateToN in lib/elliptic/ec/index.js does a shift-right of 4 bits\n * in some cases. This function does the opposite operation so that\n * _truncateToN(fixMessage(msg)) == msg.\n *\n * @param msg\n */\nfunction fixMessage(msg) {\n  var pureHex = msg.replace(/^0x0*/, '');\n  if (pureHex.length <= 62) {\n    // In this case, pureHex should not be transformed, as the byteLength() is at most 31,\n    // so delta < 0 (see _truncateToN).\n    return pureHex;\n  }\n  (0, minimalistic_assert_1.default)(pureHex.length === 63);\n  // In this case delta will be 4 so we perform a shift-left of 4 bits by adding a ZERO_BN.\n  return \"\".concat(pureHex, \"0\");\n}\nexports.genKeyPair = exports.ec.genKeyPair.bind(exports.ec);\nfunction getKeyPair(pk) {\n  var pkBn = (0, number_1.toBN)(pk);\n  return exports.ec.keyFromPrivate((0, encode_1.removeHexPrefix)((0, number_1.toHex)(pkBn)), 'hex');\n}\nexports.getKeyPair = getKeyPair;\nfunction getStarkKey(keyPair) {\n  // this method needs to be run to generate the .pub property used below\n  // the result can be dumped\n  keyPair.getPublic(true, 'hex');\n  return (0, encode_1.addHexPrefix)((0, encode_1.sanitizeBytes)(keyPair.pub.getX().toString(16), 2));\n}\nexports.getStarkKey = getStarkKey;\n/**\n * Takes a public key and casts it into `elliptic` KeyPair format.\n *\n * @param publicKey - public key which should get casted to a KeyPair\n * @returns keyPair with public key only, which can be used to verify signatures, but cant sign anything\n */\nfunction getKeyPairFromPublicKey(publicKey) {\n  var publicKeyBn = (0, number_1.toBN)(publicKey);\n  return exports.ec.keyFromPublic((0, encode_1.removeHexPrefix)((0, number_1.toHex)(publicKeyBn)), 'hex');\n}\nexports.getKeyPairFromPublicKey = getKeyPairFromPublicKey;\n/**\n * Signs a message using the provided key.\n *\n * @param keyPair should be an KeyPair with a valid private key.\n * @returns an Signature.\n */\nfunction sign(keyPair, msgHash) {\n  var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n  // Verify message hash has valid length.\n  (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n  var msgSignature = keyPair.sign(fixMessage(msgHash));\n  var r = msgSignature.r,\n    s = msgSignature.s;\n  var w = s.invm(exports.ec.n);\n  // Verify signature has valid length.\n  (0, number_1.assertInRange)(r, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n  (0, number_1.assertInRange)(s, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n  (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n  return [r.toString(), s.toString()];\n}\nexports.sign = sign;\nfunction chunkArray(arr, n) {\n  return Array(Math.ceil(arr.length / n)).fill('').map(function (_, i) {\n    return arr.slice(i * n, i * n + n);\n  });\n}\n/**\n * Verifies a message using the provided key.\n *\n * @param keyPair should be an KeyPair with a valid public key.\n * @param sig should be an Signature.\n * @returns true if the verification succeeds.\n */\nfunction verify(keyPair, msgHash, sig) {\n  var keyPairArray = Array.isArray(keyPair) ? keyPair : [keyPair];\n  var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n  (0, minimalistic_assert_1.default)(sig.length % 2 === 0, 'Signature must be an array of length dividable by 2');\n  (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n  (0, minimalistic_assert_1.default)(keyPairArray.length === sig.length / 2, 'Signature and keyPair length must be equal');\n  return chunkArray(sig, 2).every(function (_a, i) {\n    var _b;\n    var _c = __read(_a, 2),\n      r = _c[0],\n      s = _c[1];\n    var rBN = (0, number_1.toBN)(r);\n    var sBN = (0, number_1.toBN)(s);\n    var w = sBN.invm(exports.ec.n);\n    (0, number_1.assertInRange)(rBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n    (0, number_1.assertInRange)(sBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n    (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n    return (_b = exports.ec.verify(fixMessage(msgHash), {\n      r: rBN,\n      s: sBN\n    }, keyPairArray[i])) !== null && _b !== void 0 ? _b : false;\n  });\n}\nexports.verify = verify;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__importDefault","mod","__esModule","Object","defineProperty","exports","verify","sign","getKeyPairFromPublicKey","getStarkKey","getKeyPair","genKeyPair","ec","elliptic_1","require","hash_js_1","minimalistic_assert_1","constants_1","encode_1","number_1","curves","PresetCurve","type","prime","p","FIELD_PRIME","a","b","EC_ORDER","hash","default","sha256","gRed","g","CONSTANT_POINTS","fixMessage","msg","pureHex","replace","length","concat","bind","pk","pkBn","toBN","keyFromPrivate","removeHexPrefix","toHex","keyPair","getPublic","addHexPrefix","sanitizeBytes","pub","getX","toString","publicKey","publicKeyBn","keyFromPublic","msgHash","msgHashBN","assertInRange","ZERO","MAX_ECDSA_VAL","msgSignature","s","w","invm","ONE","chunkArray","arr","Array","Math","ceil","fill","map","_","slice","sig","keyPairArray","isArray","every","_a","_b","_c","rBN","sBN"],"sources":["C:/Users/admin/Documents/Blockchain test/CairoBootcamp/starknet_js_demo/node_modules/starknet/dist/utils/ellipticCurve.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verify = exports.sign = exports.getKeyPairFromPublicKey = exports.getStarkKey = exports.getKeyPair = exports.genKeyPair = exports.ec = void 0;\nvar elliptic_1 = require(\"elliptic\");\nvar hash_js_1 = __importDefault(require(\"hash.js\"));\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.ec = new elliptic_1.ec(new elliptic_1.curves.PresetCurve({\n    type: 'short',\n    prime: null,\n    p: constants_1.FIELD_PRIME,\n    a: '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001',\n    b: '06f21413 efbe40de 150e596d 72f7a8c5 609ad26c 15c915c1 f4cdfcb9 9cee9e89',\n    n: constants_1.EC_ORDER,\n    hash: hash_js_1.default.sha256,\n    gRed: false,\n    g: constants_1.CONSTANT_POINTS[1],\n}));\n/**\n * The function _truncateToN in lib/elliptic/ec/index.js does a shift-right of 4 bits\n * in some cases. This function does the opposite operation so that\n * _truncateToN(fixMessage(msg)) == msg.\n *\n * @param msg\n */\nfunction fixMessage(msg) {\n    var pureHex = msg.replace(/^0x0*/, '');\n    if (pureHex.length <= 62) {\n        // In this case, pureHex should not be transformed, as the byteLength() is at most 31,\n        // so delta < 0 (see _truncateToN).\n        return pureHex;\n    }\n    (0, minimalistic_assert_1.default)(pureHex.length === 63);\n    // In this case delta will be 4 so we perform a shift-left of 4 bits by adding a ZERO_BN.\n    return \"\".concat(pureHex, \"0\");\n}\nexports.genKeyPair = exports.ec.genKeyPair.bind(exports.ec);\nfunction getKeyPair(pk) {\n    var pkBn = (0, number_1.toBN)(pk);\n    return exports.ec.keyFromPrivate((0, encode_1.removeHexPrefix)((0, number_1.toHex)(pkBn)), 'hex');\n}\nexports.getKeyPair = getKeyPair;\nfunction getStarkKey(keyPair) {\n    // this method needs to be run to generate the .pub property used below\n    // the result can be dumped\n    keyPair.getPublic(true, 'hex');\n    return (0, encode_1.addHexPrefix)((0, encode_1.sanitizeBytes)(keyPair.pub.getX().toString(16), 2));\n}\nexports.getStarkKey = getStarkKey;\n/**\n * Takes a public key and casts it into `elliptic` KeyPair format.\n *\n * @param publicKey - public key which should get casted to a KeyPair\n * @returns keyPair with public key only, which can be used to verify signatures, but cant sign anything\n */\nfunction getKeyPairFromPublicKey(publicKey) {\n    var publicKeyBn = (0, number_1.toBN)(publicKey);\n    return exports.ec.keyFromPublic((0, encode_1.removeHexPrefix)((0, number_1.toHex)(publicKeyBn)), 'hex');\n}\nexports.getKeyPairFromPublicKey = getKeyPairFromPublicKey;\n/**\n * Signs a message using the provided key.\n *\n * @param keyPair should be an KeyPair with a valid private key.\n * @returns an Signature.\n */\nfunction sign(keyPair, msgHash) {\n    var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n    // Verify message hash has valid length.\n    (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n    var msgSignature = keyPair.sign(fixMessage(msgHash));\n    var r = msgSignature.r, s = msgSignature.s;\n    var w = s.invm(exports.ec.n);\n    // Verify signature has valid length.\n    (0, number_1.assertInRange)(r, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n    (0, number_1.assertInRange)(s, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n    (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n    return [r.toString(), s.toString()];\n}\nexports.sign = sign;\nfunction chunkArray(arr, n) {\n    return Array(Math.ceil(arr.length / n))\n        .fill('')\n        .map(function (_, i) { return arr.slice(i * n, i * n + n); });\n}\n/**\n * Verifies a message using the provided key.\n *\n * @param keyPair should be an KeyPair with a valid public key.\n * @param sig should be an Signature.\n * @returns true if the verification succeeds.\n */\nfunction verify(keyPair, msgHash, sig) {\n    var keyPairArray = Array.isArray(keyPair) ? keyPair : [keyPair];\n    var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n    (0, minimalistic_assert_1.default)(sig.length % 2 === 0, 'Signature must be an array of length dividable by 2');\n    (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n    (0, minimalistic_assert_1.default)(keyPairArray.length === sig.length / 2, 'Signature and keyPair length must be equal');\n    return chunkArray(sig, 2).every(function (_a, i) {\n        var _b;\n        var _c = __read(_a, 2), r = _c[0], s = _c[1];\n        var rBN = (0, number_1.toBN)(r);\n        var sBN = (0, number_1.toBN)(s);\n        var w = sBN.invm(exports.ec.n);\n        (0, number_1.assertInRange)(rBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n        (0, number_1.assertInRange)(sBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n        (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n        return (_b = exports.ec.verify(fixMessage(msgHash), { r: rBN, s: sBN }, keyPairArray[i])) !== null && _b !== void 0 ? _b : false;\n    });\n}\nexports.verify = verify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}